{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/searchbox/searchbox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","key","monster","id","className","src","alt","name","href","CardList","this","showMonster","map","React","Component","Searchbox","placeholder","type","onChange","handleChange","App","state","monsters","searchFiled","console","log","axios","get","then","res","setState","data","monsterField","filter","toLowerCase","includes","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wRAkBeA,G,YAfF,SAACC,GACV,OACI,6BACI,yBAAKC,IAAKD,EAAME,QAAQC,GAAIC,UAAU,QAClC,yBAAKA,UAAU,eAAeC,IAAG,+BAA0BL,EAAME,QAAQC,GAAxC,0BAAoEG,IAAI,mBACzG,yBAAKF,UAAU,aACX,wBAAIA,UAAU,cAAcJ,EAAME,QAAQK,MAE1C,uBAAGC,KAAK,IAAIJ,UAAU,mBAAtB,qBCeLK,E,kDArBX,WAAYT,GAAQ,uCACVA,G,qDAIN,OACI,yBAAKI,UAAU,aACVM,KAAKC,iB,oCAOd,OAAOD,KAAKV,MAAME,QAAQU,KAAI,SAAAV,GAC1B,OAAO,kBAAC,EAAD,CAAMD,IAAKC,EAAQC,GAAID,QAASA,W,GAhB5BW,IAAMC,W,iBCMdC,EARG,SAACf,GACf,OAAQ,2BACJI,UAAU,gCACVY,YAAahB,EAAMgB,YAAaC,KAAK,OACrCC,SAAUlB,EAAMmB,gBCoCTC,E,kDAnCb,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IAEDqB,MAAQ,CACXC,SAAU,GACVC,YAAa,IAGfC,QAAQC,IAAI,EAAKJ,MAAME,aARN,E,gEAWE,IAAD,OAClBG,IAAMC,IAAI,8CAA8CC,MAAK,SAAAC,GAC3D,EAAKC,SAAS,CAAER,SAAUO,EAAIE,OAE9BP,QAAQC,IAAII,EAAIE,W,+BAKV,IAAD,SAE2BrB,KAAKW,MAA/BC,EAFD,EAECA,SAAUC,EAFX,EAEWA,YACZS,EAAeV,EAASW,QAAO,SAAA/B,GAAO,OAAIA,EAAQK,KAAK2B,cAAcC,SAASZ,EAAYW,kBAChG,OACE,yBAAK9B,UAAU,uBACb,6CACA,kBAAC,EAAD,CAAWY,YAAY,cAAcG,aAAc,SAAAiB,GAAO,EAAKN,SAAS,CAAEP,YAAaa,EAAEC,OAAOC,WAChG,kBAAC,EAAD,CAAUpC,QAAS8B,S,GA7BTlB,aCMEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.c9b1fe1b.chunk.js","sourcesContent":["import React from 'react'\r\nimport './../card/card.style.css'\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div>\r\n            <div key={props.monster.id} className=\"card\">\r\n                <img className=\"card-img-top\" src={`https://robohash.org/${props.monster.id}?set=set2&size=500x500`} alt=\"Card image cap\" />\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{props.monster.name}</h5>\r\n                    {/* <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p> */}\r\n                    <a href=\"#\" className=\"btn btn-primary\">Go somewhere</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport './card-list.style.css'\r\nimport Card from './../card/card.component'\r\n\r\nclass CardList extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='card-list'>\r\n                {this.showMonster()}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    showMonster() {\r\n\r\n        return this.props.monster.map(monster => {\r\n            return <Card key={monster.id} monster={monster} />\r\n        })\r\n\r\n    }\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst Searchbox = (props) => {\r\n    return (<input\r\n        className='text-center form-control mb-5'\r\n        placeholder={props.placeholder} type='text'\r\n        onChange={props.handleChange} />\r\n    )\r\n}\r\n\r\nexport default Searchbox;","import React, { Component } from 'react';\nimport CardList from './components/card-list/card-list.component'\nimport axios from 'axios';\nimport Searchbox from './components/searchbox/searchbox.component'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      monsters: [],\n      searchFiled: ''\n    }\n\n    console.log(this.state.searchFiled)\n  }\n\n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/users').then(res => {\n      this.setState({ monsters: res.data });\n\n      console.log(res.data);\n    })\n  }\n\n\n  render() {\n\n    const { monsters, searchFiled } = this.state;\n    const monsterField = monsters.filter(monster => monster.name.toLowerCase().includes(searchFiled.toLowerCase()))\n    return (\n      <div className=\"App container mt-5 \">\n        <h3>Monster Frame</h3>\n        <Searchbox placeholder='Search Name' handleChange={e => { this.setState({ searchFiled: e.target.value }) }} />\n        <CardList monster={monsterField} />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}